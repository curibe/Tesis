#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <cstring>
#include <sstream>
#include <cstdlib>
#include <fstream>
#include <typeinfo>

using namespace std;


void loadconf(filename)
{
  FILE *file;
  cmd
}



template <class T>
string toString( T argument)
{
/**************************************/
/* This template shows the power of   */
/* C++ templates. This function will  */
/* convert anything to a string!      */
/* Precondition:                      */
/* operator<< is defined for type T    */
/**************************************/
       string r;
       stringstream s;

       s << argument;
       r = s.str();

       return r;

}
 

std::string exec(string cmd) {
  FILE* pipe = popen(cmd.c_str(), "r");
  if (!pipe) return "ERROR";
  char buffer[128];
  std::string result = "";
  while(!feof(pipe)) {
    if(fgets(buffer, 128, pipe) != NULL){
      result += buffer; }
    
  }
  pclose(pipe);
  result=result.substr(0,result.length()-1);
  return result;
}



int main(int argc,char *argv[])
{

  FILE *file,*Time;
  
  int Ndir,i;

  double Tini;
  
  string S="other string";
  string Principal,r,cmd;
  string Rundir,Bindir;
  //string Rundir("/RUNDIR/");
  //string Bindir("/BIN/");
  string Rdir;
  string File="BODY7.pos";
  string Fdump="Comet.pos";
  string Nl;
    
  char* CMD;
  

  
  Principal=exec("pwd");
  Rundir=Principal+"/RUNDIR/";
  Bindir=Principal+"/BIN";
  
  cmd="ls -d "+Rundir+"* | wc -l";
  r=exec(cmd);
  Ndir=atoi(r.c_str());
  
  printf("path: %s\n",Principal.c_str());
  printf("rundir: %s\n",Rundir.c_str());
  printf("cmd: %s\n",cmd.c_str());
  printf("Ndir: %d\n",Ndir);

  
  string Dir,Desc;
  int nl;
  for(i=1;i<=Ndir;i++){

    Dir=Rundir+"run"+toString(i)+"/output/";
    Desc=Rundir+"run"+toString(i)+"Description.txt";
    
    cmd="wc -l " + File + "| gawk '{print $1}'";
    Nl=exec(cmd);
    nl=atoi(Nl.c_str());
    
    cmd="tail -n " + toString(nl-4) + " "+ Dir + File + " > " + Dir+Fdump;
    printf("Dir: %s\n",Dir.c_str());
    printf("cmd: %s\n",cmd.c_str());
    system(cmd.c_str());

    cmd="grep -v \"#\" Description.txt | grep \"Star\" | gawk -F\"=\" '{print $2}' ";
    r=exec(cmd);
    Tini=atof(r.c_str());

    

    
      

    
    
      
        
    //dir<<Rundir.c_str()<<"/run"<<i<<"/output/";
    //sprintf(dir,Rundir+"/run%d/output/",i);
    printf("dir: %s\n",Dir.c_str());
    
    
  }
  

}
  // int a=1;
  // float b=2.0;
  // double c=3.0;
  // char *d="Hola";
  // string e="STRING";
  // string f;
  // char g;
  // char *h;

  // printf("Types of variable:\n");
  // printf("a: %s\n",typeid(a).name());
  // printf("b: %s\n",typeid(b).name());
  // printf("c: %s\n",typeid(c).name());
  // printf("d: %s\n",typeid(d).name());
  // printf("e: %s\n",typeid(e).name());
  // printf("f: %s\n",typeid(f).name());
  // printf("g: %s\n",typeid(g).name());
  // printf("h: %s\n",typeid(h).name());

  
  




